{"remainingRequest":"C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\src\\components\\register.vue?vue&type=template&id=8f8a1d9a&","dependencies":[{"path":"C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\src\\components\\register.vue","mtime":1605983876889},{"path":"C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\clemf\\Documents\\Prog\\Vue\\ProjetS3\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}